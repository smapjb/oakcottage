---
- name: This is a playbook for cloning a vm in RHEV
  hosts: localhost
  gather_facts: False
  vars:
    machine_state: running
    host_memory: 2
    hostname_prefix: rhel
    sequence_start: 1
    sequence_end: 3
    sockets: 1
    wait_for_ip: True
    vm_infra_wait_for_ip_retries: 100
    vm_infra_wait_for_ip_delay: 5
    #disk_added: False
    #extra_space: 12

  tasks:
    - block:
      - include_vars: ../ovirt_Password.yml
      
      - name: Obtain SSO token using username/password creds.
        ovirt_auth:
          url: https://rhvm.internal.croftvillas.com/ovirt-engine/api
          username: admin@internal
          ca_file: ../pki-resource.cer
          password: "{{ ovirt_password }}"
          insecure: yes

      - name: This task clones a machine in RHEV
        ovirt_vm:
          auth: "{{ ovirt_auth }}"
          state: "{{ machine_state }}"
          cluster: "Cluster01"
          name: "{{ item }}.internal.croftvillas.com"
          template: rhel7_template
          wait: True
          memory: "{{ host_memory }}GiB"
          cpu_sockets: "{{ sockets }}"
          cloud_init:
            host_name: "{{ item }}.internal.croftvillas.com"
            authorized_ssh_keys: "{{ root_ssh_key }}"
        async: '300'
        poll: '0'
        with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="{{ hostname_prefix }}%02d"
        register: new_vms

      - name: Check provisioning status
        async_status: jid={{ item.ansible_job_id }}
        register: job_result
        until: job_result.finished
        retries: 100
        delay: 15
        with_items: "{{ new_vms.results }}"

      - name: 'Debug'
        debug:
          msg: '{{ new_vms }}'
          verbosity: '4'

      - name: Tag these vms by hostname_prefix
        ovirt_tag:
          auth: "{{ ovirt_auth }}"
          name: "group_{{ hostname_prefix }}"
          state: attached
          vms:
            - "{{ item }}.internal.croftvillas.com"
        with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="{{ hostname_prefix }}%02d"
        when: machine_state == "running"

      - name: Tag these vms with all
        ovirt_tag:
          auth: "{{ ovirt_auth }}"
          name: "group_all"
          state: attached
          vms:
            - "{{ item }}.internal.croftvillas.com"
        with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="{{ hostname_prefix }}%02d"
        when: machine_state == "running"

      - name: Wait for VMs IP
        ovirt_vm_facts:
          auth: "{{ ovirt_auth }}"
          pattern: "name={{ item }}.internal.croftvillas.com"
          fetch_nested: true
          nested_attributes: ips
        with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="{{ hostname_prefix }}%02d"
        until: "ovirt_vms | first | json_query(query) | ipv4"
        retries: "{{ vm_infra_wait_for_ip_retries }}"
        delay: "{{ vm_infra_wait_for_ip_delay }}"
        vars:
          query: "reported_devices[*].ips[?version=='v4'].address"
          #query: "reported_devices[*].ips[*].address"
        when:
          - "wait_for_ip"
          - "machine_state == 'running'"


    #  - name: Add an additional disk to the VM
    #    ovirt_disk:
    #      auth: "{{ ovirt_auth }}"
    #      vm_name: "{{ item }}.internal.croftvillas.com"
    #      name: "{{ item }}_ExtraDisk"
    #      state: running
    #      size: "{{ extra_space }}GiB"
    #      storage_domain: QNAP_SD
    #      interface: virtio
    #    async: '300'
    #    poll: '0'
    #    with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="{{ hostname_prefix }}%02d"
    #    when: disk_added == "True" and machine_state == "running"
    #    register: new_disks
        
    #  - name: Check disk creation status
    #    async_status: jid={{ item.ansible_job_id }}
    #    register: job_result
    #    until: job_result.finished
    #    retries: 100
    #    delay: 15
    #    with_items: "{{ new_disks.results }}"
    #    when: disk_added == "True" and machine_state == "running"

      always:
      - name: Always revoke the SSO token
        ovirt_auth:
          state: absent
          ovirt_auth: "{{ ovirt_auth }}"
